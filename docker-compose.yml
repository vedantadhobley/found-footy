services:
  # Core databases
  prefect-postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect
    volumes:
      - prefect_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect -d prefect"]
      interval: 10s
      timeout: 5s
      retries: 5

  app-postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: footy_user
      POSTGRES_PASSWORD: footy_pass
      POSTGRES_DB: found_footy
    volumes:
      - app_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U footy_user -d found_footy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prefect orchestration server
  prefect-server:
    image: prefecthq/prefect:3-latest
    command: prefect server start --host 0.0.0.0
    ports:
      - "4200:4200"
    environment:
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefect@prefect-postgres:5432/prefect
    depends_on:
      prefect-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:4200/api/health')"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  # Create work pools with proper configuration
  setup-pools:
    build: .
    command: >
      sh -c "
      echo 'ðŸ”§ Setting up work pools...' &&
      if ! prefect work-pool inspect fixtures-pool >/dev/null 2>&1; then
        echo 'Creating fixtures-pool...' &&
        prefect work-pool create fixtures-pool --type process
      else
        echo 'âœ… fixtures-pool already exists'
      fi &&
      if ! prefect work-pool inspect youtube-pool >/dev/null 2>&1; then
        echo 'Creating youtube-pool...' &&
        prefect work-pool create youtube-pool --type process
      else
        echo 'âœ… youtube-pool already exists'
      fi &&
      echo 'âœ… Work pools ready!'
      "
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
    depends_on:
      prefect-server:
        condition: service_healthy
    restart: "no"

  # Your main Found Footy application
  app:
    build: .
    volumes:
      - .:/app
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      - DATABASE_URL=postgresql://footy_user:footy_pass@app-postgres:5432/found_footy
    depends_on:
      prefect-server:
        condition: service_healthy
      setup-pools:
        condition: service_completed_successfully

  # Fixtures worker with proper environment
  fixtures-worker:
    build: .
    command: prefect worker start --pool fixtures-pool --type process
    volumes:
      - .:/app  # âœ… Mount the entire source code
    working_dir: /app  # âœ… Set working directory
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      - DATABASE_URL=postgresql://footy_user:footy_pass@app-postgres:5432/found_footy
      - PYTHONPATH=/app  # âœ… Ensure Python can find modules
    depends_on:
      prefect-server:
        condition: service_healthy
      app-postgres:
        condition: service_healthy
      setup-pools:
        condition: service_completed_successfully
      app:
        condition: service_completed_successfully
    restart: on-failure

  # YouTube worker with proper environment
  youtube-worker:
    build: .
    command: prefect worker start --pool youtube-pool --type process
    volumes:
      - .:/app  # âœ… Mount the entire source code
    working_dir: /app  # âœ… Set working directory
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      - DATABASE_URL=postgresql://footy_user:footy_pass@app-postgres:5432/found_footy
      - PYTHONPATH=/app  # âœ… Ensure Python can find modules
    depends_on:
      prefect-server:
        condition: service_healthy
      app-postgres:
        condition: service_healthy
      setup-pools:
        condition: service_completed_successfully
      app:
        condition: service_completed_successfully
    restart: on-failure

  # Database admin interface
  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    depends_on:
      app-postgres:
        condition: service_healthy

volumes:
  prefect_postgres_data:
  app_postgres_data: